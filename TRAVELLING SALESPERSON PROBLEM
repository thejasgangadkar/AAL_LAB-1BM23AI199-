
#include <stdio.h>
#include <limits.h>

#define N 4  

int dist[N][N] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};  

int visited[N];  
int min_path[N]; 
int min_cost = INT_MAX;  

int calculateCost(int path[], int n) {
    int cost = 0;
    int i;
    for ( i = 0; i < n - 1; i++) {
        cost += dist[path[i]][path[i + 1]];
    }
    cost += dist[path[n - 1]][path[0]]; 
    return cost;
}

void tsp(int path[], int level) {
	int i;
    if (level == N) {
        int cost = calculateCost(path, N);
        if (cost < min_cost) {
            min_cost = cost;
            for ( i = 0; i < N; i++) {
                min_path[i] = path[i];
            }
        }
        return;
    }

    for ( i = 0; i < N; i++) {
        if (!visited[i]) {
            visited[i] = 1;  
            path[level] = i;
            tsp(path, level + 1);  
            visited[i] = 0;  
        }
    }
}

int main() {
    int path[N];
    int i;
    for ( i = 0; i < N; i++) {
        visited[i] = 0; 
    }

    path[0] = 0;
    visited[0] = 1;

    tsp(path, 1);

    printf("Minimum Cost: %d\n", min_cost);
    printf("Optimal Path: ");
    for ( i = 0; i < N; i++) {
        printf("%d ", min_path[i]);
    }
    printf("\n");

    return 0;
}
