
#include <stdio.h>
#include <stdlib.h>

#define V 5
#define E 7

struct Edge {
    int src, dest, weight;
};

struct Graph {
    struct Edge edges[E];
};

struct Subset {
    int parent;
    int rank;
};

int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

void KruskalMST(struct Graph* graph) {
    struct Edge result[V - 1];
    int e = 0, i = 0, v;

    qsort(graph->edges, E, sizeof(graph->edges[0]), compareEdges);

    struct Subset subsets[V];
    for ( v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    while (e < V - 1 && i < E) {
        struct Edge nextEdge = graph->edges[i++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        if (x != y) {
            result[e++] = nextEdge;
            Union(subsets, x, y);
        }
    }

    printf("Edge \tWeight\n");
    int totalCost = 0;
    for (i = 0; i < e; ++i) {
        printf("%c - %c \t%d\n", 'A' + result[i].src, 'A' + result[i].dest, result[i].weight);
        totalCost += result[i].weight;
    }
    printf("Total cost of MST: %d\n", totalCost);
}

int main() {
    struct Graph graph = {
        .edges = {
            {0, 1, 2},
            {1, 2, 3},
            {0, 3, 6},
            {1, 3, 8},
            {1, 4, 5},
            {2, 4, 7},
            {3, 4, 9}
        }
    };

    KruskalMST(&graph);
    return 0;
}
